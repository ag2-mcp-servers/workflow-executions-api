# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:08:48+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class CancelExecutionRequest(BaseModel):
    pass


class CallLogLevel(Enum):
    CALL_LOG_LEVEL_UNSPECIFIED = 'CALL_LOG_LEVEL_UNSPECIFIED'
    LOG_ALL_CALLS = 'LOG_ALL_CALLS'
    LOG_ERRORS_ONLY = 'LOG_ERRORS_ONLY'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class Position(BaseModel):
    column: Optional[str] = Field(
        None,
        description='The source code column position (of the line) the current instruction was generated from.',
    )
    length: Optional[str] = Field(
        None,
        description='The number of bytes of source code making up this stack trace element.',
    )
    line: Optional[str] = Field(
        None,
        description='The source code line number the current instruction was generated from.',
    )


class StackTraceElement(BaseModel):
    position: Optional[Position] = Field(
        None, description='The source position information of the stack trace element.'
    )
    routine: Optional[str] = Field(
        None, description='The routine where the error occurred.'
    )
    step: Optional[str] = Field(None, description='The step the error occurred at.')


class Step(BaseModel):
    routine: Optional[str] = Field(
        None, description='Name of a routine within the workflow.'
    )
    step: Optional[str] = Field(None, description='Name of a step within the routine.')


class View(Enum):
    EXECUTION_VIEW_UNSPECIFIED = 'EXECUTION_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class StackTrace(BaseModel):
    elements: Optional[List[StackTraceElement]] = Field(
        None, description='An array of stack elements.'
    )


class Status(BaseModel):
    currentSteps: Optional[List[Step]] = Field(
        None,
        description='A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.',
    )


class Error(BaseModel):
    context: Optional[str] = Field(
        None, description='Human-readable stack trace string.'
    )
    payload: Optional[str] = Field(
        None,
        description='Error message and data returned represented as a JSON string.',
    )
    stackTrace: Optional[StackTrace] = Field(
        None,
        description='Stack trace with detailed information of where error was generated.',
    )


class Execution(BaseModel):
    argument: Optional[str] = Field(
        None,
        description='Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `\'{"argument":"{\\"firstName\\":\\"FIRST\\",\\"lastName\\":\\"LAST\\"}"}\'`',
    )
    callLogLevel: Optional[CallLogLevel] = Field(
        None, description='The call logging level associated to this execution.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. Marks the end of execution, successful or not.'
    )
    error: Optional[Error] = Field(
        None,
        description="Output only. The error which caused the execution to finish prematurely. The value is only present if the execution's state is `FAILED` or `CANCELLED`.",
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}',
    )
    result: Optional[str] = Field(
        None,
        description="Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.",
    )
    startTime: Optional[str] = Field(
        None, description='Output only. Marks the beginning of execution.'
    )
    state: Optional[State] = Field(
        None, description='Output only. Current state of the execution.'
    )
    status: Optional[Status] = Field(
        None,
        description='Output only. Status tracks the current steps and progress data of this execution.',
    )
    workflowRevisionId: Optional[str] = Field(
        None,
        description='Output only. Revision of the workflow this execution is using.',
    )


class ListExecutionsResponse(BaseModel):
    executions: Optional[List[Execution]] = Field(
        None, description='The executions which match the request.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
